import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# FAQ –¥–∞–Ω–Ω—ã–µ
FAQ = {
    'hours': '‚è∞ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º: –ü–Ω-–ü—Ç 9:00-18:00, –°–±-–í—Å 10:00-16:00',
    'contact': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\nüìß Email: support@example.com\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX',
    'delivery': 'üöö –î–æ—Å—Ç–∞–≤–∫–∞: 2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ',
    'payment': 'üí≥ –û–ø–ª–∞—Ç–∞: –ù–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç—ã, –æ–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥—ã',
}

def log_user_message(update: Update):
    user = update.message.from_user
    text = update.message.text
    with open("users_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{user.first_name} ({user.username}) ‚Äî {text}\n")


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", callback_data='hours')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contact')],
        [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data='payment')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    user_name = update.effective_user.first_name

    await update.message.reply_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n'
        '–Ø –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:',
        reply_markup=reply_markup
    )


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
        '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n'
        '/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n\n'
        '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!'
    )
    await update.message.reply_text(help_text)


# –ö–æ–º–∞–Ω–¥–∞ /contact
async def contact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(FAQ['contact'])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'help':
        text = (
            'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
            '/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
            '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
            '/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n\n'
            '–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º!'
        )
    else:
        text = FAQ.get(query.data, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", callback_data='hours')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contact')],
        [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery')],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data='payment')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        'üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:',
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_user_message(update)
    user_message = update.message.text.lower()

    # –ü—Ä–æ—Å—Ç—ã–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
    if '–ø—Ä–∏–≤–µ—Ç' in user_message or '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π' in user_message:
        await update.message.reply_text('üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.')
    elif '—Å–ø–∞—Å–∏–±–æ' in user_message:
        await update.message.reply_text('üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å!')
    elif '–≤—Ä–µ–º—è' in user_message or '—Ä–∞–±–æ—Ç–∞' in user_message:
        await update.message.reply_text(FAQ['hours'])
    elif '–∫–æ–Ω—Ç–∞–∫—Ç' in user_message or '—Ç–µ–ª–µ—Ñ–æ–Ω' in user_message:
        await update.message.reply_text(FAQ['contact'])
    elif '–¥–æ—Å—Ç–∞–≤–∫' in user_message:
        await update.message.reply_text(FAQ['delivery'])
    elif '–æ–ø–ª–∞—Ç' in user_message or '–ø–ª–∞—Ç' in user_message:
        await update.message.reply_text(FAQ['payment'])
    else:
        await update.message.reply_text(
            'ü§î –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ –º–µ–Ω—é!'
        )


def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("contact", contact_command))
    application.add_handler(CallbackQueryHandler(back_to_menu_handler, pattern='back_to_menu'))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()